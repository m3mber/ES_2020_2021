{"ast":null,"code":"var _jsxFileName = \"/Users/vv/Projects/bitbustracker/client/src/Map/Map.tsx\";\n// /* global google */\n// import React, { useState } from 'react';\n// import {\n//   Marker,\n//   GoogleMap,\n//   DirectionsRenderer,\n//   withGoogleMap,\n// } from 'react-google-maps';\n// export interface IMapProps {}\n// const Map: React.FC<IMapProps> = (withGoogleMap, withScriptjs) => {\n//   const directionsService = new google.maps.DirectionsService();\n//   const [directions, setDirections] = useState<any>();\n//   const [origin, setOrigin] = useState<any>();\n//   const [destination, setDestination] = useState<any>();\n//   directionsService.route(\n//     {\n//       origin: origin,\n//       destination: destination,\n//       travelMode: google.maps.TravelMode.DRIVING,\n//     },\n//     (result, status) => {\n//       if (status === google.maps.DirectionsStatus.OK) {\n//         setDirections(result);\n//       } else {\n//         console.error(`error fetching directions ${result}`);\n//       }\n//     }\n//   );\n//   return (\n//     <section className='googleMap'>\n//       <GoogleMap defaultZoom={9} defaultCenter={{ lat: 41.75, lng: 1.8 }}>\n//         <Marker position={origin} />\n//         <Marker position={destination} />\n//         {directions && <DirectionsRenderer directions={directions} />}\n//       </GoogleMap>\n//     </section>\n//   );\n// };\n// export { Map };\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  compose,\n  withProps,\n  lifecycle\n} = require('recompose');\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer\n} = require('react-google-maps');\n\nconst MapWithADirectionsRenderer = compose(withProps({\n  googleMapURL: 'https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places',\n  loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 21\n  }, this),\n  containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `400px`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 23\n  }, this),\n  mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 17\n  }, this)\n}), withScriptjs, withGoogleMap, lifecycle({\n  componentDidMount() {\n    const DirectionsService = new google.maps.DirectionsService();\n    DirectionsService.route({\n      origin: new google.maps.LatLng(41.85073, -87.65126),\n      destination: new google.maps.LatLng(41.85258, -87.65141),\n      travelMode: google.maps.TravelMode.DRIVING\n    }, (result, status) => {\n      if (status === google.maps.DirectionsStatus.OK) {\n        this.setState({\n          directions: result\n        });\n      } else {\n        console.error(`error fetching directions ${result}`);\n      }\n    });\n  }\n\n}))(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n  defaultZoom: 7,\n  defaultCenter: new google.maps.LatLng(41.85073, -87.65126),\n  children: props.directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n    directions: props.directions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 26\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 88,\n  columnNumber: 3\n}, this));\n\n/*#__PURE__*/\n_jsxDEV(MapWithADirectionsRenderer, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 96,\n  columnNumber: 1\n}, this);\n\nexport { MapWithADirectionsRenderer };","map":{"version":3,"sources":["/Users/vv/Projects/bitbustracker/client/src/Map/Map.tsx"],"names":["React","compose","withProps","lifecycle","require","withScriptjs","withGoogleMap","GoogleMap","DirectionsRenderer","MapWithADirectionsRenderer","googleMapURL","loadingElement","height","containerElement","mapElement","componentDidMount","DirectionsService","google","maps","route","origin","LatLng","destination","travelMode","TravelMode","DRIVING","result","status","DirectionsStatus","OK","setState","directions","console","error","props"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAgC,OAAhC;;;AAEA,MAAM;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,SAAX;AAAsBC,EAAAA;AAAtB,IAAoCC,OAAO,CAAC,WAAD,CAAjD;;AACA,MAAM;AACJC,EAAAA,YADI;AAEJC,EAAAA,aAFI;AAGJC,EAAAA,SAHI;AAIJC,EAAAA;AAJI,IAKFJ,OAAO,CAAC,mBAAD,CALX;;AAOA,MAAMK,0BAA0B,GAAGR,OAAO,CACxCC,SAAS,CAAC;AACRQ,EAAAA,YAAY,EACV,+HAFM;AAGRC,EAAAA,cAAc,eAAE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA,UAHR;AAIRC,EAAAA,gBAAgB,eAAE;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA,UAJV;AAKRE,EAAAA,UAAU,eAAE;AAAK,IAAA,KAAK,EAAE;AAAEF,MAAAA,MAAM,EAAG;AAAX;AAAZ;AAAA;AAAA;AAAA;AAAA;AALJ,CAAD,CAD+B,EAQxCP,YARwC,EASxCC,aATwC,EAUxCH,SAAS,CAAC;AACRY,EAAAA,iBAAiB,GAAG;AAClB,UAAMC,iBAAiB,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYF,iBAAhB,EAA1B;AAEAA,IAAAA,iBAAiB,CAACG,KAAlB,CACE;AACEC,MAAAA,MAAM,EAAE,IAAIH,MAAM,CAACC,IAAP,CAAYG,MAAhB,CAAuB,QAAvB,EAAiC,CAAC,QAAlC,CADV;AAEEC,MAAAA,WAAW,EAAE,IAAIL,MAAM,CAACC,IAAP,CAAYG,MAAhB,CAAuB,QAAvB,EAAiC,CAAC,QAAlC,CAFf;AAGEE,MAAAA,UAAU,EAAEN,MAAM,CAACC,IAAP,CAAYM,UAAZ,CAAuBC;AAHrC,KADF,EAME,CAACC,MAAD,EAASC,MAAT,KAAoB;AAClB,UAAIA,MAAM,KAAKV,MAAM,CAACC,IAAP,CAAYU,gBAAZ,CAA6BC,EAA5C,EAAgD;AAC9C,aAAKC,QAAL,CAAc;AACZC,UAAAA,UAAU,EAAEL;AADA,SAAd;AAGD,OAJD,MAIO;AACLM,QAAAA,OAAO,CAACC,KAAR,CAAe,6BAA4BP,MAAO,EAAlD;AACD;AACF,KAdH;AAgBD;;AApBO,CAAD,CAV+B,CAAP,CAgChCQ,KAAD,iBACA,QAAC,SAAD;AACE,EAAA,WAAW,EAAE,CADf;AAEE,EAAA,aAAa,EAAE,IAAIjB,MAAM,CAACC,IAAP,CAAYG,MAAhB,CAAuB,QAAvB,EAAiC,CAAC,QAAlC,CAFjB;AAAA,YAIGa,KAAK,CAACH,UAAN,iBAAoB,QAAC,kBAAD;AAAoB,IAAA,UAAU,EAAEG,KAAK,CAACH;AAAtC;AAAA;AAAA;AAAA;AAAA;AAJvB;AAAA;AAAA;AAAA;AAAA,QAjCiC,CAAnC;;AAyCA;AAAA,QAAC,0BAAD;AAAA;AAAA;AAAA;AAAA;;AAEA,SAAStB,0BAAT","sourcesContent":["// /* global google */\n// import React, { useState } from 'react';\n// import {\n//   Marker,\n//   GoogleMap,\n//   DirectionsRenderer,\n//   withGoogleMap,\n// } from 'react-google-maps';\n\n// export interface IMapProps {}\n\n// const Map: React.FC<IMapProps> = (withGoogleMap, withScriptjs) => {\n//   const directionsService = new google.maps.DirectionsService();\n//   const [directions, setDirections] = useState<any>();\n//   const [origin, setOrigin] = useState<any>();\n//   const [destination, setDestination] = useState<any>();\n\n//   directionsService.route(\n//     {\n//       origin: origin,\n//       destination: destination,\n//       travelMode: google.maps.TravelMode.DRIVING,\n//     },\n//     (result, status) => {\n//       if (status === google.maps.DirectionsStatus.OK) {\n//         setDirections(result);\n//       } else {\n//         console.error(`error fetching directions ${result}`);\n//       }\n//     }\n//   );\n\n//   return (\n//     <section className='googleMap'>\n//       <GoogleMap defaultZoom={9} defaultCenter={{ lat: 41.75, lng: 1.8 }}>\n//         <Marker position={origin} />\n//         <Marker position={destination} />\n//         {directions && <DirectionsRenderer directions={directions} />}\n//       </GoogleMap>\n//     </section>\n//   );\n// };\n\n// export { Map };\nimport React, { useState } from 'react';\n\nconst { compose, withProps, lifecycle } = require('recompose');\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  DirectionsRenderer,\n} = require('react-google-maps');\n\nconst MapWithADirectionsRenderer = compose(\n  withProps({\n    googleMapURL:\n      'https://maps.googleapis.com/maps/api/js?key=AIzaSyC4R6AN7SmujjPUIGKdyao2Kqitzr1kiRg&v=3.exp&libraries=geometry,drawing,places',\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n  }),\n  withScriptjs,\n  withGoogleMap,\n  lifecycle({\n    componentDidMount() {\n      const DirectionsService = new google.maps.DirectionsService();\n\n      DirectionsService.route(\n        {\n          origin: new google.maps.LatLng(41.85073, -87.65126),\n          destination: new google.maps.LatLng(41.85258, -87.65141),\n          travelMode: google.maps.TravelMode.DRIVING,\n        },\n        (result, status) => {\n          if (status === google.maps.DirectionsStatus.OK) {\n            this.setState({\n              directions: result,\n            });\n          } else {\n            console.error(`error fetching directions ${result}`);\n          }\n        }\n      );\n    },\n  })\n)((props: { directions: any }) => (\n  <GoogleMap\n    defaultZoom={7}\n    defaultCenter={new google.maps.LatLng(41.85073, -87.65126)}\n  >\n    {props.directions && <DirectionsRenderer directions={props.directions} />}\n  </GoogleMap>\n));\n\n<MapWithADirectionsRenderer />;\n\nexport { MapWithADirectionsRenderer };\n"]},"metadata":{},"sourceType":"module"}