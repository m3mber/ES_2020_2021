{"ast":null,"code":"var _jsxFileName = \"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Typography, Modal, IconButton, makeStyles } from '@material-ui/core';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport SockJsClient from 'react-stomp';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  modalStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    display: 'flex'\n  },\n  modalDiv: {\n    overflow: 'auto',\n    backgroundColor: 'white',\n    width: '30%',\n    height: '30%',\n    borderRadius: '10px',\n    flexDirection: 'column',\n    justifyContent: 'start',\n    alignItems: 'center',\n    padding: 5\n  },\n  exitButton: {\n    position: 'absolute',\n    right: '33%',\n    top: '33%',\n    backgroundColor: 'white',\n    '&:hover': {\n      background: 'white',\n      transform: 'scale(1.15)'\n    }\n  },\n  loadingLanguages: {\n    position: 'absolute',\n    width: '30%',\n    height: '30%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '10px'\n  }\n}));\nconst SOCKET_URL = 'http://localhost:8081/real-time/';\n\nconst BusTrackingModal = ({\n  isOpen,\n  closeModal\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [loading, setLoading] = useState(true);\n  const [messages, setMessages] = useState([]);\n\n  let onConnected = () => {\n    console.log('Connected!!');\n  };\n\n  let onMessageReceived = msg => {\n    console.log('New Message Received!!', msg);\n    setMessages(messages.concat(msg));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    disableBackdropClick: true,\n    className: classes.modalStyle,\n    open: isOpen,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.modalDiv,\n      children: [/*#__PURE__*/_jsxDEV(SockJsClient, {\n        url: SOCKET_URL,\n        topics: ['/ESP13_bus_data'],\n        onConnect: onConnected,\n        onDisconnect: console.log('Disconnected!'),\n        onMessage: msg => onMessageReceived(msg),\n        debug: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: messages[0].locationId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        className: classes.exitButton,\n        onClick: () => {\n          closeModal();\n        },\n        children: /*#__PURE__*/_jsxDEV(HighlightOffIcon, {\n          fontSize: \"large\",\n          color: \"secondary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BusTrackingModal, \"CR4zHA0PB2BIerJrwb/VYPoOZd4=\", false, function () {\n  return [useStyles];\n});\n\n_c = BusTrackingModal;\nexport { BusTrackingModal };\n\nvar _c;\n\n$RefreshReg$(_c, \"BusTrackingModal\");","map":{"version":3,"sources":["/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx"],"names":["React","useState","Typography","Modal","IconButton","makeStyles","HighlightOffIcon","SockJsClient","useStyles","theme","modalStyle","justifyContent","alignItems","display","modalDiv","overflow","backgroundColor","width","height","borderRadius","flexDirection","padding","exitButton","position","right","top","background","transform","loadingLanguages","marginTop","SOCKET_URL","BusTrackingModal","isOpen","closeModal","classes","loading","setLoading","messages","setMessages","onConnected","console","log","onMessageReceived","msg","concat","locationId"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Typography,\n  Modal,\n  CircularProgress,\n  IconButton,\n  makeStyles,\n} from '@material-ui/core';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport SockJsClient from 'react-stomp';\n\nexport interface IBusTrackingModalProps {\n  isOpen: boolean;\n  closeModal: Function;\n}\n\nexport interface IMessageData {\n  id: number;\n  node_id: number;\n  location_id: number;\n  head: string;\n  lon: number;\n  lat: number;\n  speed: number;\n  ts: string;\n  write_time: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  modalStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  modalDiv: {\n    overflow: 'auto',\n    backgroundColor: 'white',\n    width: '30%',\n    height: '30%',\n    borderRadius: '10px',\n    flexDirection: 'column',\n    justifyContent: 'start',\n    alignItems: 'center',\n    padding: 5,\n  },\n  exitButton: {\n    position: 'absolute',\n    right: '33%',\n    top: '33%',\n    backgroundColor: 'white',\n    '&:hover': {\n      background: 'white',\n      transform: 'scale(1.15)',\n    },\n  },\n  loadingLanguages: {\n    position: 'absolute',\n    width: '30%',\n    height: '30%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '10px',\n  },\n}));\n\nconst SOCKET_URL = 'http://localhost:8081/real-time/';\n\nconst BusTrackingModal: React.FC<IBusTrackingModalProps> = ({\n  isOpen,\n  closeModal,\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [messages, setMessages] = useState<IMessageData[]>([]);\n\n  let onConnected = () => {\n    console.log('Connected!!');\n  };\n  let onMessageReceived = (msg: IMessageData) => {\n    console.log('New Message Received!!', msg);\n    setMessages(messages.concat(msg));\n  };\n\n  return (\n    <Modal\n      disableBackdropClick={true}\n      className={classes.modalStyle}\n      open={isOpen}\n    >\n      <div className={classes.modalDiv}>\n        <SockJsClient\n          url={SOCKET_URL}\n          topics={['/ESP13_bus_data']}\n          onConnect={onConnected}\n          onDisconnect={console.log('Disconnected!')}\n          onMessage={(msg: any) => onMessageReceived(msg)}\n          debug={false}\n        />\n        <Typography>{messages[0].locationId}</Typography>\n        <IconButton\n          className={classes.exitButton}\n          onClick={() => {\n            closeModal();\n          }}\n        >\n          <HighlightOffIcon fontSize='large' color='secondary' />\n        </IconButton>\n      </div>\n    </Modal>\n  );\n};\n\nexport { BusTrackingModal };\n"]},"metadata":{},"sourceType":"module"}