{"ast":null,"code":"var _jsxFileName = \"/Users/vv/Projects/bitbustracker/client/src/Map/Map.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  compose,\n  withProps,\n  withStateHandlers\n} = require('recompose');\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer\n} = require('react-google-maps');\n\nconst {\n  InfoBox\n} = require('react-google-maps/lib/components/addons/InfoBox');\n\nconst places = [{\n  latitude: 25.8103146,\n  longitude: -80.1751609\n}, {\n  latitude: 27.9947147,\n  longitude: -82.5943645\n}, {\n  latitude: 28.4813018,\n  longitude: -81.4387899\n}];\n\nclass MapDirectionsRenderer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      directions: null,\n      error: null\n    };\n  }\n\n  componentDidMount() {\n    const {\n      places,\n      travelMode\n    } = this.props;\n    const waypoints = places.map(p => ({\n      location: {\n        lat: p.latitude,\n        lng: p.longitude\n      },\n      stopover: true\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: travelMode,\n      waypoints: waypoints\n    }, (result, status) => {\n      if (status === google.maps.DirectionsStatus.OK) {\n        this.setState({\n          directions: result\n        });\n      } else {\n        this.setState({\n          error: result\n        });\n      }\n    });\n  }\n\n  render() {\n    if (this.state.error) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: this.state.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 14\n      }, this);\n    }\n\n    return this.state.directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n      directions: this.state.directions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nconst Map = compose(withProps({\n  googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n  loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 21\n  }, this),\n  containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `400px`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 23\n  }, this),\n  mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 17\n  }, this),\n  center: {\n    lat: 41.14961,\n    lng: -8.61099\n  }\n}), withStateHandlers(() => ({\n  isOpen: false\n}), {\n  onToggleOpen: isOpen => () => ({\n    isOpen: !isOpen\n  })\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n  defaultZoom: 12,\n  defaultCenter: props.center // defaultOptions={{ styles: demoFancyMapStyles }}\n\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 92,\n  columnNumber: 5\n}, this));\nexport { Map };","map":{"version":3,"sources":["/Users/vv/Projects/bitbustracker/client/src/Map/Map.tsx"],"names":["React","compose","withProps","withStateHandlers","require","withScriptjs","withGoogleMap","GoogleMap","Marker","DirectionsRenderer","InfoBox","places","latitude","longitude","MapDirectionsRenderer","Component","state","directions","error","componentDidMount","travelMode","props","waypoints","map","p","location","lat","lng","stopover","origin","shift","destination","pop","directionsService","google","maps","DirectionsService","route","result","status","DirectionsStatus","OK","setState","render","Map","googleMapURL","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","loadingElement","height","containerElement","mapElement","center","isOpen","onToggleOpen"],"mappings":"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","sourcesContent":["import React from 'react';\nconst { compose, withProps, withStateHandlers } = require('recompose');\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n} = require('react-google-maps');\nconst { InfoBox } = require('react-google-maps/lib/components/addons/InfoBox');\n\nconst places = [\n  { latitude: 25.8103146, longitude: -80.1751609 },\n  { latitude: 27.9947147, longitude: -82.5943645 },\n  { latitude: 28.4813018, longitude: -81.4387899 },\n];\n\nclass MapDirectionsRenderer extends React.Component {\n  state = {\n    directions: null,\n    error: null,\n  };\n\n  componentDidMount() {\n    const { places, travelMode } = this.props;\n\n    const waypoints = places.map((p) => ({\n      location: { lat: p.latitude, lng: p.longitude },\n      stopover: true,\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n        waypoints: waypoints,\n      },\n      (result, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          this.setState({\n            directions: result,\n          });\n        } else {\n          this.setState({ error: result });\n        }\n      }\n    );\n  }\n\n  render() {\n    if (this.state.error) {\n      return <h1>{this.state.error}</h1>;\n    }\n    return (\n      this.state.directions && (\n        <DirectionsRenderer directions={this.state.directions} />\n      )\n    );\n  }\n}\n\nconst Map = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n    center: { lat: 41.14961, lng: -8.61099 },\n  }),\n  withStateHandlers(\n    () => ({\n      isOpen: false,\n    }),\n    {\n      onToggleOpen: (isOpen: any) => () => ({\n        isOpen: !isOpen,\n      }),\n    }\n  ),\n  withScriptjs,\n  withGoogleMap\n)(\n  (props: {\n    center: { lat: number; lng: number };\n    onToggleOpen: any;\n    isOpen: any;\n  }) => (\n    <GoogleMap\n      defaultZoom={12}\n      defaultCenter={props.center}\n      // defaultOptions={{ styles: demoFancyMapStyles }}\n    ></GoogleMap>\n  )\n);\n\nexport { Map };\n"]},"metadata":{},"sourceType":"module"}