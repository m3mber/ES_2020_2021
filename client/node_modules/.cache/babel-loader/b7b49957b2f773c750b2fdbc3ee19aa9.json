{"ast":null,"code":"var _jsxFileName = \"/Users/vv/Projects/bitbustracker/client/src/Map/Map.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst {\n  compose,\n  withProps,\n  withStateHandlers\n} = require('recompose');\n\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer\n} = require('react-google-maps');\n\nconst {\n  InfoBox\n} = require('react-google-maps/lib/components/addons/InfoBox');\n\nconst places = [{\n  latitude: 25.8103146,\n  longitude: -80.1751609\n}, {\n  latitude: 27.9947147,\n  longitude: -82.5943645\n}, {\n  latitude: 28.4813018,\n  longitude: -81.4387899\n}];\n\nfunction MapDirectionsRenderer(props) {\n  _s();\n\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const {\n      places,\n      travelMode\n    } = props;\n    const waypoints = places.map(p => ({\n      location: {\n        lat: p.latitude,\n        lng: p.longitude\n      },\n      stopover: true\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route({\n      origin: origin,\n      destination: destination,\n      travelMode: travelMode,\n      waypoints: waypoints\n    }, (result, status) => {\n      console.log(result);\n\n      if (status === google.maps.DirectionsStatus.OK) {\n        setDirections(result);\n      } else {\n        setError(result);\n      }\n    });\n  });\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 12\n    }, this);\n  }\n\n  return directions && /*#__PURE__*/_jsxDEV(DirectionsRenderer, {\n    directions: directions\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 24\n  }, this);\n}\n\n_s(MapDirectionsRenderer, \"EbZ3rf2k47q8bOIBnVG92TiLXsw=\");\n\n_c = MapDirectionsRenderer;\nconst Map = compose(withProps({\n  googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n  loadingElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 21\n  }, this),\n  containerElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `400px`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 23\n  }, this),\n  mapElement: /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: `100%`\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 17\n  }, this),\n  center: {\n    lat: 41.14961,\n    lng: -8.61099\n  }\n}), withStateHandlers(() => ({\n  isOpen: false\n}), {\n  onToggleOpen: isOpen => () => ({\n    isOpen: !isOpen\n  })\n}), withScriptjs, withGoogleMap)(props => /*#__PURE__*/_jsxDEV(GoogleMap, {\n  defaultZoom: 12,\n  defaultCenter: props.center,\n  props: true,\n  children: /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [props.markers.map((marker, index) => {\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: {\n          lat: marker.latitude,\n          lng: marker.longitude\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(MapDirectionsRenderer, {\n      places: props.markers,\n      travelMode: google.maps.TravelMode.DRIVING\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 84,\n  columnNumber: 5\n}, this));\nexport { Map };\n\nvar _c;\n\n$RefreshReg$(_c, \"MapDirectionsRenderer\");","map":{"version":3,"sources":["/Users/vv/Projects/bitbustracker/client/src/Map/Map.tsx"],"names":["React","useState","useEffect","compose","withProps","withStateHandlers","require","withScriptjs","withGoogleMap","GoogleMap","Marker","DirectionsRenderer","InfoBox","places","latitude","longitude","MapDirectionsRenderer","props","directions","setDirections","error","setError","travelMode","waypoints","map","p","location","lat","lng","stopover","origin","shift","destination","pop","directionsService","google","maps","DirectionsService","route","result","status","console","log","DirectionsStatus","OK","Map","googleMapURL","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","loadingElement","height","containerElement","mapElement","center","isOpen","onToggleOpen","markers","marker","index","TravelMode","DRIVING"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nconst { compose, withProps, withStateHandlers } = require('recompose');\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n} = require('react-google-maps');\nconst { InfoBox } = require('react-google-maps/lib/components/addons/InfoBox');\n\nconst places = [\n  { latitude: 25.8103146, longitude: -80.1751609 },\n  { latitude: 27.9947147, longitude: -82.5943645 },\n  { latitude: 28.4813018, longitude: -81.4387899 },\n];\n\nfunction MapDirectionsRenderer(props: { places: any; travelMode: any }) {\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const { places, travelMode } = props;\n\n    const waypoints = places.map((p: any) => ({\n      location: { lat: p.latitude, lng: p.longitude },\n      stopover: true,\n    }));\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n        waypoints: waypoints,\n      },\n      (result: any, status) => {\n        console.log(result);\n        if (status === google.maps.DirectionsStatus.OK) {\n          setDirections(result);\n        } else {\n          setError(result);\n        }\n      }\n    );\n  });\n\n  if (error) {\n    return <h1>{error}</h1>;\n  }\n  return directions && <DirectionsRenderer directions={directions} />;\n}\n\nconst Map = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n    center: { lat: 41.14961, lng: -8.61099 },\n  }),\n  withStateHandlers(\n    () => ({\n      isOpen: false,\n    }),\n    {\n      onToggleOpen: (isOpen: any) => () => ({\n        isOpen: !isOpen,\n      }),\n    }\n  ),\n  withScriptjs,\n  withGoogleMap\n)(\n  (props: {\n    center: { lat: number; lng: number };\n    onToggleOpen: any;\n    isOpen: any;\n    markers: any;\n  }) => (\n    <GoogleMap defaultZoom={12} defaultCenter={props.center} props>\n      <>\n        {props.markers.map((marker: any, index: number) => {\n          return (\n            <Marker\n              key={index}\n              position={{ lat: marker.latitude, lng: marker.longitude }}\n            />\n          );\n        })}\n        <MapDirectionsRenderer\n          places={props.markers}\n          travelMode={google.maps.TravelMode.DRIVING}\n        />\n      </>\n    </GoogleMap>\n  )\n);\n\nexport { Map };\n"]},"metadata":{},"sourceType":"module"}