[{"C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\index.tsx":"1","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\App.tsx":"3","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\Modal\\BusTrackingModal.tsx":"4","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\Feedback\\Feedback.tsx":"5","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\Map\\Map.tsx":"6"},{"size":513,"mtime":1622909321581,"results":"7","hashOfConfig":"8"},{"size":440,"mtime":1622909321582,"results":"9","hashOfConfig":"8"},{"size":5192,"mtime":1623673019562,"results":"10","hashOfConfig":"8"},{"size":4407,"mtime":1623675551035,"results":"11","hashOfConfig":"8"},{"size":1678,"mtime":1623018177564,"results":"12","hashOfConfig":"8"},{"size":3157,"mtime":1623673019563,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vf3tv7",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},"C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\index.tsx",[],"C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\App.tsx",["29","30","31","32","33","34"],"import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { Map } from './Map/Map';\r\nimport { HistoricalTable } from 'Table/HistoricalTable';\r\nimport { Button } from '@material-ui/core';\r\nimport { BusTrackingModal } from 'Modal/BusTrackingModal';\r\nimport { IFeedback, Feedback } from 'Feedback/Feedback';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  SelectProps,\r\n} from '@material-ui/core';\r\n\r\nconst busId = '00000000-0000-0000-0000-000000002481';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: 130,\r\n  },\r\n\r\n  inputFeedback: {\r\n    color: 'red',\r\n    textAlign: 'start',\r\n    fontSize: '13px',\r\n    fontWeight: 400,\r\n    marginTop: '3px',\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  // const { isLoaded, loadError } = useLoadScript({\r\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY ? ,\r\n  //   libraries,\r\n  // });\r\n  const classes = useStyles();\r\n  const [isBusTrackingModalOpen, setIsBusTrackingModalOpen] = useState<boolean>(\r\n    false\r\n  );\r\n\r\n  let eventSource: EventSource | undefined = undefined;\r\n  const [listening, setListening] = useState(false);\r\n  const [feedbackData, setFeedbackData] = useState<IFeedback>();\r\n\r\n  const [busIds, setBusIds] = useState<any[]>([]);\r\n  const [currentBusId, setCurrentBusId] = useState<any>();\r\n  useEffect(() => {\r\n    fetch('http://localhost:8084/bus/ids')\r\n      .then((res) => res.json())\r\n      .then((result) => {\r\n        console.log(result);\r\n        setBusIds(result);\r\n      });\r\n  }, []);\r\n  // const [currentPosition, setCurrentPosition] = useState<any>({});\r\n\r\n  // useEffect(() => {\r\n  //   navigator.geolocation.getCurrentPosition(success);\r\n  // }, []);\r\n\r\n  // const success = (position: any) => {\r\n  //   const currentPosition = {\r\n  //     lat: position.coords.latitude,\r\n  //     lng: position.coords.longitude,\r\n  //   };\r\n  //   setCurrentPosition(currentPosition);\r\n  // };\r\n\r\n  // console.log(currentPosition);\r\n\r\n  //-8.610423,41.14931 lat long\r\n  const setBusAlarm = async () => {\r\n    const response = await fetch(\r\n      `http://localhost:8082/current-location?id=${currentBusId}&latLong=-8.610423,41.14931`\r\n    );\r\n    console.log(response);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!listening) {\r\n      eventSource = new EventSource('http://localhost:8080/alarm');\r\n\r\n      eventSource.onopen = (event) => {\r\n        console.log('connection opened');\r\n      };\r\n\r\n      eventSource.onmessage = (event) => {\r\n        console.log('result', event.data);\r\n        setFeedbackData({\r\n          open: true,\r\n          severity: 'warning',\r\n          message: event.data,\r\n        });\r\n      };\r\n\r\n      eventSource.onerror = (event: any) => {\r\n        if (eventSource && event.target) {\r\n          console.log(event.target.readyState);\r\n          if (event.target.readyState === EventSource.CLOSED) {\r\n            console.log('eventsource closed (' + event.target.readyState + ')');\r\n          }\r\n          eventSource.close();\r\n        }\r\n      };\r\n\r\n      setListening(true);\r\n    }\r\n    return () => {\r\n      eventSource && eventSource.close();\r\n      console.log('eventsource closed');\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className='App' style={{ flexDirection: 'column' }}>\r\n      {/*  {center={currentPosition}} */}\r\n      {/* <div\r\n        style={{\r\n          padding: 50,\r\n          width: '90%',\r\n          marginBottom: 40,\r\n        }}\r\n      >\r\n        <HistoricalTable />\r\n      </div> */}\r\n      <FormControl style={{ width: 150 }}>\r\n        <InputLabel>Bus ids</InputLabel>\r\n        <Select\r\n          native\r\n          value={currentBusId || ''}\r\n          onChange={(event: any) => {\r\n            setCurrentBusId(event.target.value);\r\n          }}\r\n        >\r\n          <option aria-label='None' value='' />\r\n          {busIds.map((item: any, index: number) => (\r\n            <option key={index} value={item}>\r\n              {item}\r\n            </option>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      <div style={{ position: 'absolute', top: '10%', left: '20' }}>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={() => setIsBusTrackingModalOpen(true)}\r\n        >\r\n          Track bus\r\n        </Button>\r\n      </div>\r\n      <div style={{ position: 'absolute', top: '15%', left: '20' }}>\r\n        <Button\r\n          variant='contained'\r\n          color='primary'\r\n          onClick={() => setBusAlarm()}\r\n        >\r\n          Set alarm for bus\r\n        </Button>\r\n      </div>\r\n      {isBusTrackingModalOpen && (\r\n        <BusTrackingModal\r\n          isOpen={isBusTrackingModalOpen}\r\n          busId={currentBusId}\r\n          closeModal={() => {\r\n            setIsBusTrackingModalOpen(false);\r\n          }}\r\n        />\r\n      )}\r\n      {feedbackData?.open && feedbackData?.message && feedbackData?.severity && (\r\n        <Feedback\r\n          open={feedbackData?.open}\r\n          message={feedbackData?.message}\r\n          severity={feedbackData?.severity}\r\n          onClose={() => {\r\n            setFeedbackData(undefined);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\Modal\\BusTrackingModal.tsx",["35","36"],"import React, { useState, useEffect } from 'react';\r\nimport { Typography, Modal, IconButton, makeStyles } from '@material-ui/core';\r\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\r\nimport { Map } from '../Map/Map';\r\n\r\nexport interface IBusTrackingModalProps {\r\n  isOpen: boolean;\r\n  closeModal: Function;\r\n  busId: string;\r\n}\r\n\r\nexport interface IMessageData {\r\n  id: number;\r\n  node_id: number;\r\n  location_id: number;\r\n  head: string;\r\n  lon: number;\r\n  lat: number;\r\n  speed: number;\r\n  ts: string;\r\n  write_time: string;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modalStyle: {\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n  },\r\n  modalDiv: {\r\n    overflow: 'auto',\r\n    backgroundColor: 'white',\r\n    width: '80%',\r\n    height: '80%',\r\n    borderRadius: '10px',\r\n    flexDirection: 'column',\r\n    justifyContent: 'start',\r\n    alignItems: 'center',\r\n    padding: 5,\r\n  },\r\n  exitButton: {\r\n    position: 'absolute',\r\n    right: '7%',\r\n    top: '7%',\r\n    backgroundColor: 'white',\r\n    '&:hover': {\r\n      background: 'white',\r\n      transform: 'scale(1.15)',\r\n    },\r\n  },\r\n  loadingLanguages: {\r\n    position: 'absolute',\r\n    width: '30%',\r\n    height: '30%',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    marginTop: '10px',\r\n  },\r\n}));\r\n\r\nconst BusTrackingModal: React.FC<IBusTrackingModalProps> = ({\r\n  isOpen,\r\n  closeModal,\r\n  busId,\r\n}) => {\r\n  const classes = useStyles();\r\n  // let places = [\r\n  //   { latitude: 41.166058, longitude: -8.58294 },\r\n  //   { latitude: 41.17144, longitude: -8.594005 },\r\n  //   // { latitude: 41.172817, longitude: -8.607225 },\r\n  //   // { latitude: 41.154613, longitude: -8.607225 },\r\n  // ];\r\n  let eventSource: EventSource | undefined = undefined;\r\n  const [listening, setListening] = useState(false);\r\n  const [places, setPlaces] = useState<\r\n    { latitude: number; longitude: number }[]\r\n  >([\r\n    // { latitude: 41.166058, longitude: -8.58294 },\r\n    // { latitude: 41.17144, longitude: -8.594005 },\r\n  ]);\r\n\r\n  console.log(places);\r\n  useEffect(() => {\r\n    getBusStops();\r\n    if (!listening) {\r\n      eventSource = new EventSource(\r\n        `http://localhost:8080/location?id=${busId}`\r\n      );\r\n\r\n      eventSource.onopen = (event) => {\r\n        console.log('connection opened');\r\n      };\r\n\r\n      eventSource.onmessage = (event) => {\r\n        console.log('result', event.data);\r\n        let message = event.data;\r\n        let messageArray = message.split(','); //on index 0 lat, on index 1 long\r\n\r\n        setPlaces((old) => [\r\n          ...old,\r\n          { latitude: +(messageArray[0]), longitude: parseFloat(messageArray[1]) },\r\n        ]);\r\n      };\r\n\r\n      eventSource.onerror = (event: any) => {\r\n        if (eventSource && event.target) {\r\n          console.log(event.target.readyState);\r\n          if (event.target.readyState === EventSource.CLOSED) {\r\n            console.log('eventsource closed (' + event.target.readyState + ')');\r\n          }\r\n          eventSource.close();\r\n        }\r\n      };\r\n\r\n      setListening(true);\r\n    }\r\n    return () => {\r\n      eventSource && eventSource.close();\r\n      console.log('eventsource closed');\r\n    };\r\n  }, []);\r\n\r\n  const getBusStops = async () => {\r\n    const databaseResponse = await fetch(\r\n      `http://localhost:8084/bus/locations?busId=${busId}`\r\n    );\r\n    const body = await databaseResponse.json();\r\n    console.log(\"Reponse from bus/locations\");\r\n    console.log(databaseResponse);\r\n    console.log(body);\r\n    for (let i = 0; i < body.length; i = i + 2) {\r\n      setPlaces((old) => [\r\n        ...old,\r\n        { latitude: parseFloat(body[i]), longitude: parseFloat(body[i + 1]) },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      disableBackdropClick={true}\r\n      className={classes.modalStyle}\r\n      open={isOpen}\r\n    >\r\n      <div className={classes.modalDiv}>\r\n        <Map markers={places} />\r\n        {/* {data.length > 0 &&\r\n          data.map((item: any, index: number) => (\r\n            <Typography key={index}>{item}</Typography>\r\n          ))} */}\r\n        <IconButton\r\n          className={classes.exitButton}\r\n          onClick={() => {\r\n            closeModal();\r\n          }}\r\n        >\r\n          <HighlightOffIcon fontSize='large' color='secondary' />\r\n        </IconButton>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport { BusTrackingModal };\r\n","C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\Feedback\\Feedback.tsx",[],"C:\\Users\\jcpbr\\Desktop\\ES\\Git Main\\ES_2020_2021\\client\\src\\Map\\Map.tsx",["37","38","39"],"/* eslint-disable no-undef */\r\nimport React, { useState, useEffect } from 'react';\r\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\r\nimport BusIcon from 'assets/Aiga_bus.svg';\r\n\r\nconst {\r\n  compose,\r\n  withProps,\r\n  withStateHandlers,\r\n  lifecycle,\r\n} = require('recompose');\r\nconst {\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  GoogleMap,\r\n  Marker,\r\n  DirectionsRenderer,\r\n} = require('react-google-maps');\r\n\r\nconst { InfoBox } = require('react-google-maps/lib/components/addons/InfoBox');\r\n\r\nfunction MapDirectionsRenderer(props: { places: any; travelMode: any }) {\r\n  const [directions, setDirections] = useState(null);\r\n  const [error, setError] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const { places, travelMode } = props;\r\n    const waypoints: any[] = [];\r\n    places.forEach((p: any) => {\r\n      waypoints.push({\r\n        location: { lat: p.latitude, lng: p.longitude },\r\n        stopover: true,\r\n      });\r\n    });\r\n\r\n    const origin = waypoints.shift().location;\r\n    const destination = waypoints.pop().location;\r\n\r\n    const directionsService = new google.maps.DirectionsService();\r\n\r\n    directionsService.route(\r\n      {\r\n        origin: origin,\r\n        destination: destination,\r\n        travelMode: travelMode,\r\n        waypoints: waypoints,\r\n      },\r\n      (result: any, status) => {\r\n        if (status === google.maps.DirectionsStatus.OK) {\r\n          setDirections(result);\r\n        } else {\r\n          setError(result);\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n  if (error) {\r\n    return <h1>{error?.status}</h1>;\r\n  }\r\n  return (\r\n    directions && <DirectionsRenderer directions={directions} suppressMarkers />\r\n  );\r\n}\r\n\r\nconst Map = compose(\r\n  withProps({\r\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\r\n    loadingElement: <div style={{ height: `100%` }} />,\r\n    containerElement: <div style={{ height: `100%` }} />,\r\n    mapElement: <div style={{ height: `100%` }} />,\r\n    center: { lat: 41.14961, lng: -8.61099 },\r\n  }),\r\n  withStateHandlers(\r\n    () => ({\r\n      isOpen: false,\r\n    }),\r\n    {\r\n      onToggleOpen: (isOpen: any) => () => ({\r\n        isOpen: !isOpen,\r\n      }),\r\n    }\r\n  ),\r\n  withScriptjs,\r\n  withGoogleMap\r\n)(\r\n  (props: {\r\n    center: { lat: number; lng: number };\r\n    onToggleOpen: any;\r\n    isOpen: any;\r\n    markers: any;\r\n  }) =>\r\n    props.center.lat && (\r\n      <GoogleMap defaultZoom={12} defaultCenter={props.center} props>\r\n        {props.markers.length > 0 && (\r\n          <Marker\r\n            icon={{\r\n              url: BusIcon,\r\n              scaledSize: new window.google.maps.Size(20, 20),\r\n            }}\r\n            position={{\r\n              lat: props.markers[props.markers.length - 1]?.latitude,\r\n              lng: props.markers[props.markers.length - 1]?.longitude,\r\n            }}\r\n          />\r\n        )}\r\n        {props.markers.length > 1 && (\r\n          <MapDirectionsRenderer\r\n            places={props.markers}\r\n            travelMode={google.maps.TravelMode.DRIVING}\r\n          />\r\n        )}\r\n      </GoogleMap>\r\n    )\r\n);\r\n\r\nexport { Map };\r\n",{"ruleId":"40","severity":1,"message":"41","line":3,"column":10,"nodeType":"42","messageId":"43","endLine":3,"endColumn":13},{"ruleId":"40","severity":1,"message":"44","line":4,"column":10,"nodeType":"42","messageId":"43","endLine":4,"endColumn":25},{"ruleId":"40","severity":1,"message":"45","line":13,"column":3,"nodeType":"42","messageId":"43","endLine":13,"endColumn":14},{"ruleId":"40","severity":1,"message":"46","line":16,"column":7,"nodeType":"42","messageId":"43","endLine":16,"endColumn":12},{"ruleId":"40","severity":1,"message":"47","line":37,"column":9,"nodeType":"42","messageId":"43","endLine":37,"endColumn":16},{"ruleId":"48","severity":1,"message":"49","line":82,"column":21,"nodeType":"50","endLine":82,"endColumn":67},{"ruleId":"40","severity":1,"message":"51","line":2,"column":10,"nodeType":"42","messageId":"43","endLine":2,"endColumn":20},{"ruleId":"48","severity":1,"message":"49","line":87,"column":21,"nodeType":"50","endLine":89,"endColumn":8},{"ruleId":"40","severity":1,"message":"52","line":3,"column":8,"nodeType":"42","messageId":"43","endLine":3,"endColumn":25},{"ruleId":"40","severity":1,"message":"53","line":10,"column":3,"nodeType":"42","messageId":"43","endLine":10,"endColumn":12},{"ruleId":"40","severity":1,"message":"54","line":20,"column":9,"nodeType":"42","messageId":"43","endLine":20,"endColumn":16},"@typescript-eslint/no-unused-vars","'Map' is defined but never used.","Identifier","unusedVar","'HistoricalTable' is defined but never used.","'SelectProps' is defined but never used.","'busId' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'Typography' is defined but never used.","'DirectionsBusIcon' is defined but never used.","'lifecycle' is assigned a value but never used.","'InfoBox' is assigned a value but never used."]