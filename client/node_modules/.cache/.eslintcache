[{"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx":"1","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts":"2","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx":"3","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx":"4","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx":"5","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx":"6","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx":"7"},{"size":496,"mtime":1622909521571,"results":"8","hashOfConfig":"9"},{"size":425,"mtime":1620672810209,"results":"10","hashOfConfig":"9"},{"size":2599,"mtime":1623015052656,"results":"11","hashOfConfig":"9"},{"size":2757,"mtime":1623014660338,"results":"12","hashOfConfig":"9"},{"size":1599,"mtime":1621197407846,"results":"13","hashOfConfig":"9"},{"size":1880,"mtime":1621197156966,"results":"14","hashOfConfig":"9"},{"size":3024,"mtime":1623014660339,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1tdrdwm",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx",[],["33","34"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx",["35","36","37"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Map } from './Map/Map';\nimport { HistoricalTable } from 'Table/HistoricalTable';\nimport { Button } from '@material-ui/core';\nimport { BusTrackingModal } from 'Modal/BusTrackingModal';\n\nconst places = [\n  { latitude: 41.1675503, longitude: -8.687209 },\n  { latitude: 41.164945, longitude: -8.672024 },\n  { latitude: 41.154613, longitude: -8.613325 },\n];\n\nconst busId = '00000000-0000-0000-0000-000000002481';\n\nfunction App() {\n  // const { isLoaded, loadError } = useLoadScript({\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY ? ,\n  //   libraries,\n  // });\n\n  const [isBusTrackingModalOpen, setIsBusTrackingModalOpen] = useState<boolean>(\n    false\n  );\n\n  const [isBusAlarmModalOpen, setIsBusAlarmModelOpen] = useState<boolean>(\n    false\n  );\n  // const [currentPosition, setCurrentPosition] = useState<any>({});\n\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(success);\n  // }, []);\n\n  // const success = (position: any) => {\n  //   const currentPosition = {\n  //     lat: position.coords.latitude,\n  //     lng: position.coords.longitude,\n  //   };\n  //   setCurrentPosition(currentPosition);\n  // };\n\n  // console.log(currentPosition);\n\n  //-8.610423,41.14931 lat long\n  const setBusAlarm = async () => {\n    const response = await fetch(\n      `http://localhost:8082/current-location?id=${busId}&latLong=-8.610423,41.14931`\n    );\n    console.log(response);\n  };\n\n  return (\n    <div className='App' style={{ flexDirection: 'column' }}>\n      <Map markers={places} />\n      {/*  {center={currentPosition}} */}\n      <div\n        style={{\n          padding: 50,\n          width: '90%',\n          marginBottom: 40,\n        }}\n      >\n        <HistoricalTable />\n      </div>\n      <div style={{ position: 'absolute', top: '50%', left: '20' }}>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => setIsBusTrackingModalOpen(true)}\n        >\n          Track bus 2481\n        </Button>\n      </div>\n      <div style={{ position: 'absolute', top: '55%', left: '20' }}>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => setBusAlarm()}\n        >\n          Set alarm for bus 2481\n        </Button>\n      </div>\n      {isBusTrackingModalOpen && (\n        <BusTrackingModal\n          isOpen={isBusTrackingModalOpen}\n          busId={busId}\n          closeModal={() => {\n            setIsBusTrackingModalOpen(false);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx",["38"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx",["39","40"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGridExtended } from 'DataGrid/DataGridExtended';\nimport { GridColumns, GridRowsProp } from '@material-ui/data-grid';\n\nexport interface IHistoricalTableProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  rootDiv: {\n    flexDirection: 'column',\n    display: 'flex',\n    height: '400px',\n  },\n  textField: {\n    textAlign: 'left',\n    width: 'auto',\n    margin: 15,\n    height: 40,\n  },\n  tableStyle: {\n    display: 'flex',\n    height: '500px',\n\n    width: '100%',\n  },\n}));\n\nconst HistoricalTable: React.FC<IHistoricalTableProps> = ({}) => {\n  const classes = useStyles();\n  const [rows, setRows] = useState<GridRowsProp>([]);\n\n  const columns: GridColumns = [\n    {\n      field: 'id',\n      headerName: 'Id',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 1.5,\n    },\n    {\n      field: 'code',\n      headerName: 'Code',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 1.5,\n    },\n    {\n      field: 'name',\n      headerName: 'Name',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 2,\n    },\n  ];\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    try {\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className={classes.rootDiv}>\n      <DataGridExtended\n        tableHeader={'Historical data'}\n        containerClassName={classes.tableStyle}\n        rows={rows}\n        columns={columns}\n        pageSize={25}\n      />\n    </div>\n  );\n};\n\nexport { HistoricalTable };\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx",["41"],{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":1,"column":27,"nodeType":"48","messageId":"49","endLine":1,"endColumn":36},{"ruleId":"46","severity":1,"message":"50","line":26,"column":10,"nodeType":"48","messageId":"49","endLine":26,"endColumn":29},{"ruleId":"46","severity":1,"message":"51","line":26,"column":31,"nodeType":"48","messageId":"49","endLine":26,"endColumn":53},{"ruleId":"46","severity":1,"message":"52","line":13,"column":9,"nodeType":"48","messageId":"49","endLine":13,"endColumn":16},{"ruleId":"53","severity":1,"message":"54","line":28,"column":59,"nodeType":"55","messageId":"56","endLine":28,"endColumn":61},{"ruleId":"46","severity":1,"message":"57","line":30,"column":16,"nodeType":"48","messageId":"49","endLine":30,"endColumn":23},{"ruleId":"58","severity":1,"message":"59","line":74,"column":21,"nodeType":"60","endLine":76,"endColumn":8},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'isBusAlarmModalOpen' is assigned a value but never used.","'setIsBusAlarmModelOpen' is assigned a value but never used.","'InfoBox' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setRows' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-global-assign","no-unsafe-negation"]