[{"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx":"1","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts":"2","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx":"3","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx":"4","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Feedback/Feedback.tsx":"5","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx":"6","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx":"7","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx":"8"},{"size":496,"mtime":1624218616223,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1620672810209,"results":"11","hashOfConfig":"10"},{"size":2776,"mtime":1624229067683,"results":"12","hashOfConfig":"10"},{"size":4239,"mtime":1624227650500,"results":"13","hashOfConfig":"10"},{"size":1606,"mtime":1623070615415,"results":"14","hashOfConfig":"10"},{"size":3004,"mtime":1624218720289,"results":"15","hashOfConfig":"10"},{"size":4202,"mtime":1624229359124,"results":"16","hashOfConfig":"10"},{"size":1880,"mtime":1621197156966,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1tdrdwm",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx",[],["37","38"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx",["39","40","41"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx",["42","43"],"import React, { useState, useEffect } from 'react';\nimport { Typography, Modal, IconButton, makeStyles } from '@material-ui/core';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\nimport { Map } from '../Map/Map';\n\nexport interface IBusTrackingModalProps {\n  isOpen: boolean;\n  closeModal: Function;\n  busId: string;\n}\n\nexport interface IMessageData {\n  id: number;\n  node_id: number;\n  location_id: number;\n  head: string;\n  lon: number;\n  lat: number;\n  speed: number;\n  ts: string;\n  write_time: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  modalStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  modalDiv: {\n    overflow: 'auto',\n    backgroundColor: 'white',\n    width: '80%',\n    height: '80%',\n    borderRadius: '10px',\n    flexDirection: 'column',\n    justifyContent: 'start',\n    alignItems: 'center',\n    padding: 5,\n  },\n  exitButton: {\n    position: 'absolute',\n    right: '7%',\n    top: '7%',\n    backgroundColor: 'white',\n    '&:hover': {\n      background: 'white',\n      transform: 'scale(1.15)',\n    },\n  },\n  loadingLanguages: {\n    position: 'absolute',\n    width: '30%',\n    height: '30%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '10px',\n  },\n}));\n\nconst BusTrackingModal: React.FC<IBusTrackingModalProps> = ({\n  isOpen,\n  closeModal,\n  busId,\n}) => {\n  const classes = useStyles();\n\n  let eventSource: EventSource | undefined = undefined;\n  const [listening, setListening] = useState(false);\n  const [places, setPlaces] = useState<\n    { latitude: number; longitude: number }[]\n  >([]);\n  const [routes, setRoutes] = useState<\n    { latitude: number; longitude: number }[]\n  >([]);\n\n  useEffect(() => {\n    fetch(`http://localhost:8084/bus/routes?busId=${busId}`)\n      .then((res) => res.json())\n      .then((result) => {\n        for (let i = 0; i < result.length; i = i + 2) {\n          setRoutes((old) => [\n            ...old,\n            {\n              latitude: +result[i],\n              longitude: +result[i + 1],\n            },\n          ]);\n        }\n      });\n\n    getBusStops();\n    if (!listening) {\n      eventSource = new EventSource(\n        `http://localhost:8080/location?id=${busId}`\n      );\n\n      eventSource.onopen = (event) => {\n        console.log('connection opened');\n      };\n\n      eventSource.onmessage = (event) => {\n        console.log('result', event.data);\n        let message = event.data;\n        let messageArray = message.split(','); //on index 0 lat, on index 1 long\n\n        setPlaces((old) => [\n          ...old,\n          {\n            latitude: +messageArray[0],\n            longitude: +messageArray[1],\n          },\n        ]);\n      };\n\n      eventSource.onerror = (event: any) => {\n        if (eventSource && event.target) {\n          if (event.target.readyState === EventSource.CLOSED) {\n            console.log('eventsource closed (' + event.target.readyState + ')');\n          }\n          eventSource.close();\n        }\n      };\n\n      setListening(true);\n    }\n    return () => {\n      eventSource && eventSource.close();\n      console.log('eventsource closed');\n    };\n  }, []);\n\n  const getBusStops = async () => {\n    const databaseResponse = await fetch(\n      `http://localhost:8084/bus/locations?busId=${busId}`\n    );\n    const body = await databaseResponse.json();\n    for (let i = 0; i < body.length; i = i + 2) {\n      setPlaces((old) => [\n        ...old,\n        { latitude: parseFloat(body[i]), longitude: parseFloat(body[i + 1]) },\n      ]);\n    }\n  };\n\n  return (\n    <Modal\n      disableBackdropClick={true}\n      className={classes.modalStyle}\n      open={isOpen}\n    >\n      <div className={classes.modalDiv}>\n        <Map markers={routes} currentPosition={places[places.length - 1]} />\n        {/* {data.length > 0 &&\n          data.map((item: any, index: number) => (\n            <Typography key={index}>{item}</Typography>\n          ))} */}\n        <IconButton\n          className={classes.exitButton}\n          onClick={() => {\n            closeModal();\n          }}\n        >\n          <HighlightOffIcon fontSize='large' color='secondary' />\n        </IconButton>\n      </div>\n    </Modal>\n  );\n};\n\nexport { BusTrackingModal };\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Feedback/Feedback.tsx",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx",["44","45","46"],"/* eslint-disable no-undef */\nimport React, { useState, useEffect } from 'react';\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\nimport BusIcon from 'assets/Aiga_bus.svg';\n\nconst {\n  compose,\n  withProps,\n  withStateHandlers,\n  lifecycle,\n} = require('recompose');\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n} = require('react-google-maps');\n\nconst { InfoBox } = require('react-google-maps/lib/components/addons/InfoBox');\n\nfunction MapDirectionsRenderer(props: { places: any; travelMode: any }) {\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState<any>(null);\n\n  useEffect(() => {\n    const { places, travelMode } = props;\n    const waypoints: any[] = [];\n    places.forEach((p: any) => {\n      waypoints.push({\n        location: { lat: p.latitude, lng: p.longitude },\n        stopover: true,\n      });\n    });\n\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n\n    const directionsService = new google.maps.DirectionsService();\n\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n        waypoints: waypoints,\n      },\n      (result: any, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          setDirections(result);\n        } else {\n          setError(result);\n        }\n      }\n    );\n  });\n\n  if (error) {\n    return <h1>{error?.status}</h1>;\n  }\n  return directions && <DirectionsRenderer directions={directions} />;\n}\n\nconst Map = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `100%` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n    center: { lat: 41.14961, lng: -8.61099 },\n  }),\n  withStateHandlers(\n    () => ({\n      isOpen: false,\n    }),\n    {\n      onToggleOpen: (isOpen: any) => () => ({\n        isOpen: !isOpen,\n      }),\n    }\n  ),\n  withScriptjs,\n  withGoogleMap\n)(\n  (props: {\n    center: { lat: number; lng: number };\n    onToggleOpen: any;\n    isOpen: any;\n    markers: any;\n    currentPosition: any;\n  }) =>\n    props.center.lat && (\n      <GoogleMap defaultZoom={12} defaultCenter={props.center} props>\n        {props.markers.length > 0 && (\n          <Marker\n            icon={{\n              url: BusIcon,\n              scaledSize: new window.google.maps.Size(20, 20),\n            }}\n            position={{\n              lat: props.currentPosition?.latitude,\n              lng: props.currentPosition?.longitude,\n            }}\n          />\n        )}\n        {props.markers.length > 1 && (\n          <MapDirectionsRenderer\n            places={props.markers}\n            travelMode={google.maps.TravelMode.DRIVING}\n          />\n        )}\n      </GoogleMap>\n    )\n);\n\nexport { Map };\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx",["47","48"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":8,"column":7,"nodeType":"55","messageId":"56","endLine":8,"endColumn":12},{"ruleId":"53","severity":1,"message":"57","line":10,"column":7,"nodeType":"55","messageId":"56","endLine":10,"endColumn":16},{"ruleId":"58","severity":1,"message":"59","line":36,"column":21,"nodeType":"60","endLine":36,"endColumn":67},{"ruleId":"53","severity":1,"message":"61","line":2,"column":10,"nodeType":"55","messageId":"56","endLine":2,"endColumn":20},{"ruleId":"58","severity":1,"message":"59","line":95,"column":21,"nodeType":"60","endLine":97,"endColumn":8},{"ruleId":"53","severity":1,"message":"62","line":3,"column":8,"nodeType":"55","messageId":"56","endLine":3,"endColumn":25},{"ruleId":"53","severity":1,"message":"63","line":10,"column":3,"nodeType":"55","messageId":"56","endLine":10,"endColumn":12},{"ruleId":"53","severity":1,"message":"64","line":20,"column":9,"nodeType":"55","messageId":"56","endLine":20,"endColumn":16},{"ruleId":"53","severity":1,"message":"65","line":7,"column":3,"nodeType":"55","messageId":"56","endLine":7,"endColumn":13},{"ruleId":"66","severity":1,"message":"67","line":40,"column":59,"nodeType":"68","messageId":"69","endLine":40,"endColumn":61},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"@typescript-eslint/no-unused-vars","'busId' is assigned a value but never used.","Identifier","unusedVar","'useStyles' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'Typography' is defined but never used.","'DirectionsBusIcon' is defined but never used.","'lifecycle' is assigned a value but never used.","'InfoBox' is assigned a value but never used.","'GridColDef' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","no-global-assign","no-unsafe-negation"]