[{"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx":"1","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts":"2","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx":"3","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx":"4","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx":"5","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx":"6","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx":"7","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Feedback/Feedback.tsx":"8"},{"size":496,"mtime":1622909521571,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1620672810209,"results":"11","hashOfConfig":"10"},{"size":4303,"mtime":1623017697098,"results":"12","hashOfConfig":"10"},{"size":2757,"mtime":1623014660338,"results":"13","hashOfConfig":"10"},{"size":1599,"mtime":1621197407846,"results":"14","hashOfConfig":"10"},{"size":1880,"mtime":1621197156966,"results":"15","hashOfConfig":"10"},{"size":3024,"mtime":1623014660339,"results":"16","hashOfConfig":"10"},{"size":1606,"mtime":1623014660336,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1tdrdwm",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx",[],["38","39"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx",["40","41","42","43","44","45"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx",["46"],"import React, { useState, useEffect } from 'react';\nimport DirectionsBusIcon from '@material-ui/icons/DirectionsBus';\n\nconst { compose, withProps, withStateHandlers } = require('recompose');\nconst {\n  withScriptjs,\n  withGoogleMap,\n  GoogleMap,\n  Marker,\n  DirectionsRenderer,\n} = require('react-google-maps');\n\nconst { InfoBox } = require('react-google-maps/lib/components/addons/InfoBox');\n\nfunction MapDirectionsRenderer(props: { places: any; travelMode: any }) {\n  const [directions, setDirections] = useState(null);\n  const [error, setError] = useState<any>(null);\n\n  useEffect(() => {\n    const { places, travelMode } = props;\n    const waypoints: any[] = [];\n    places.forEach((p: any) => {\n      waypoints.push({\n        location: { lat: p.latitude, lng: p.longitude },\n        stopover: true,\n      });\n    });\n\n    const origin = waypoints.shift().location;\n    const destination = waypoints.pop().location;\n\n    const directionsService = new google.maps.DirectionsService();\n    directionsService.route(\n      {\n        origin: origin,\n        destination: destination,\n        travelMode: travelMode,\n        waypoints: waypoints,\n      },\n      (result: any, status) => {\n        if (status === google.maps.DirectionsStatus.OK) {\n          setDirections(result);\n        } else {\n          setError(result);\n        }\n      }\n    );\n  });\n\n  if (error) {\n    return <h1>{error?.status}</h1>;\n  }\n  return directions && <DirectionsRenderer directions={directions} />;\n}\n\nconst Map = compose(\n  withProps({\n    googleMapURL: `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}&v=3.exp&libraries=geometry,drawing,places`,\n    loadingElement: <div style={{ height: `100%` }} />,\n    containerElement: <div style={{ height: `400px` }} />,\n    mapElement: <div style={{ height: `100%` }} />,\n    center: { lat: 41.14961, lng: -8.61099 },\n  }),\n  withStateHandlers(\n    () => ({\n      isOpen: false,\n    }),\n    {\n      onToggleOpen: (isOpen: any) => () => ({\n        isOpen: !isOpen,\n      }),\n    }\n  ),\n  withScriptjs,\n  withGoogleMap\n)(\n  (props: {\n    center: { lat: number; lng: number };\n    onToggleOpen: any;\n    isOpen: any;\n    markers: any;\n  }) =>\n    props.center.lat && (\n      <GoogleMap defaultZoom={12} defaultCenter={props.center} props>\n        <>\n          {props.markers.map((marker: any, index: number) => (\n            <Marker\n              key={index}\n              icon={DirectionsBusIcon}\n              position={{ lat: marker.latitude, lng: marker.longitude }}\n            />\n          ))}\n          <MapDirectionsRenderer\n            places={props.markers}\n            travelMode={google.maps.TravelMode.DRIVING}\n          />\n        </>\n      </GoogleMap>\n    )\n);\n\nexport { Map };\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx",["47","48"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGridExtended } from 'DataGrid/DataGridExtended';\nimport { GridColumns, GridRowsProp } from '@material-ui/data-grid';\n\nexport interface IHistoricalTableProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  rootDiv: {\n    flexDirection: 'column',\n    display: 'flex',\n    height: '400px',\n  },\n  textField: {\n    textAlign: 'left',\n    width: 'auto',\n    margin: 15,\n    height: 40,\n  },\n  tableStyle: {\n    display: 'flex',\n    height: '500px',\n\n    width: '100%',\n  },\n}));\n\nconst HistoricalTable: React.FC<IHistoricalTableProps> = ({}) => {\n  const classes = useStyles();\n  const [rows, setRows] = useState<GridRowsProp>([]);\n\n  const columns: GridColumns = [\n    {\n      field: 'id',\n      headerName: 'Id',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 1.5,\n    },\n    {\n      field: 'code',\n      headerName: 'Code',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 1.5,\n    },\n    {\n      field: 'name',\n      headerName: 'Name',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 2,\n    },\n  ];\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    try {\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className={classes.rootDiv}>\n      <DataGridExtended\n        tableHeader={'Historical data'}\n        containerClassName={classes.tableStyle}\n        rows={rows}\n        columns={columns}\n        pageSize={25}\n      />\n    </div>\n  );\n};\n\nexport { HistoricalTable };\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx",["49"],"import React, { useState, useEffect } from 'react';\nimport { Typography, Modal, IconButton, makeStyles } from '@material-ui/core';\nimport HighlightOffIcon from '@material-ui/icons/HighlightOff';\n\nexport interface IBusTrackingModalProps {\n  isOpen: boolean;\n  closeModal: Function;\n  busId: string;\n}\n\nexport interface IMessageData {\n  id: number;\n  node_id: number;\n  location_id: number;\n  head: string;\n  lon: number;\n  lat: number;\n  speed: number;\n  ts: string;\n  write_time: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  modalStyle: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  modalDiv: {\n    overflow: 'auto',\n    backgroundColor: 'white',\n    width: '30%',\n    height: '30%',\n    borderRadius: '10px',\n    flexDirection: 'column',\n    justifyContent: 'start',\n    alignItems: 'center',\n    padding: 5,\n  },\n  exitButton: {\n    position: 'absolute',\n    right: '33%',\n    top: '33%',\n    backgroundColor: 'white',\n    '&:hover': {\n      background: 'white',\n      transform: 'scale(1.15)',\n    },\n  },\n  loadingLanguages: {\n    position: 'absolute',\n    width: '30%',\n    height: '30%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginTop: '10px',\n  },\n}));\n\nconst BusTrackingModal: React.FC<IBusTrackingModalProps> = ({\n  isOpen,\n  closeModal,\n  busId,\n}) => {\n  const classes = useStyles();\n\n  let eventSource: EventSource | undefined = undefined;\n  const [listening, setListening] = useState(false);\n  const [data, setData] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (!listening) {\n      eventSource = new EventSource(\n        `http://localhost:8080/location?id=${busId}`\n      );\n\n      eventSource.onopen = (event) => {\n        console.log('connection opened');\n      };\n\n      eventSource.onmessage = (event) => {\n        console.log('result', event.data);\n        setData((old) => [...old, event.data]);\n      };\n\n      eventSource.onerror = (event: any) => {\n        if (eventSource && event.target) {\n          console.log(event.target.readyState);\n          if (event.target.readyState === EventSource.CLOSED) {\n            console.log('eventsource closed (' + event.target.readyState + ')');\n          }\n          eventSource.close();\n        }\n      };\n\n      setListening(true);\n    }\n    return () => {\n      eventSource && eventSource.close();\n      console.log('eventsource closed');\n    };\n  }, []);\n\n  return (\n    <Modal\n      disableBackdropClick={true}\n      className={classes.modalStyle}\n      open={isOpen}\n    >\n      <div className={classes.modalDiv}>\n        {data.length > 0 &&\n          data.map((item: any, index: number) => (\n            <Typography key={index}>{item}</Typography>\n          ))}\n        <IconButton\n          className={classes.exitButton}\n          onClick={() => {\n            closeModal();\n          }}\n        >\n          <HighlightOffIcon fontSize='large' color='secondary' />\n        </IconButton>\n      </div>\n    </Modal>\n  );\n};\n\nexport { BusTrackingModal };\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Feedback/Feedback.tsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":36},{"ruleId":"54","severity":1,"message":"58","line":27,"column":7,"nodeType":"56","messageId":"57","endLine":27,"endColumn":43},{"ruleId":"54","severity":1,"message":"59","line":28,"column":10,"nodeType":"56","messageId":"57","endLine":28,"endColumn":19},{"ruleId":"54","severity":1,"message":"60","line":28,"column":21,"nodeType":"56","messageId":"57","endLine":28,"endColumn":33},{"ruleId":"54","severity":1,"message":"61","line":29,"column":10,"nodeType":"56","messageId":"57","endLine":29,"endColumn":14},{"ruleId":"54","severity":1,"message":"62","line":29,"column":16,"nodeType":"56","messageId":"57","endLine":29,"endColumn":23},{"ruleId":"54","severity":1,"message":"63","line":13,"column":9,"nodeType":"56","messageId":"57","endLine":13,"endColumn":16},{"ruleId":"64","severity":1,"message":"65","line":28,"column":59,"nodeType":"66","messageId":"67","endLine":28,"endColumn":61},{"ruleId":"54","severity":1,"message":"68","line":30,"column":16,"nodeType":"56","messageId":"57","endLine":30,"endColumn":23},{"ruleId":"69","severity":1,"message":"70","line":74,"column":21,"nodeType":"71","endLine":76,"endColumn":8},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'eventSource' is assigned a value but never used.","'listening' is assigned a value but never used.","'setListening' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'InfoBox' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setRows' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","no-global-assign","no-unsafe-negation"]