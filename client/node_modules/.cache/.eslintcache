[{"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx":"1","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts":"2","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx":"3","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx":"4","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx":"5","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx":"6","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx":"7","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Feedback/Feedback.tsx":"8"},{"size":496,"mtime":1622909521571,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1620672810209,"results":"11","hashOfConfig":"10"},{"size":5007,"mtime":1623658737986,"results":"12","hashOfConfig":"10"},{"size":3014,"mtime":1624200790462,"results":"13","hashOfConfig":"10"},{"size":1599,"mtime":1621197407846,"results":"14","hashOfConfig":"10"},{"size":1880,"mtime":1621197156966,"results":"15","hashOfConfig":"10"},{"size":4251,"mtime":1624199939996,"results":"16","hashOfConfig":"10"},{"size":1606,"mtime":1623070615415,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1tdrdwm",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/index.tsx",[],["38","39"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/reportWebVitals.ts",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/App.tsx",["40","41","42","43","44","45"],"import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Map } from './Map/Map';\nimport { HistoricalTable } from 'Table/HistoricalTable';\nimport { Button } from '@material-ui/core';\nimport { BusTrackingModal } from 'Modal/BusTrackingModal';\nimport { IFeedback, Feedback } from 'Feedback/Feedback';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  SelectProps,\n} from '@material-ui/core';\n\nconst busId = '00000000-0000-0000-0000-000000002481';\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    minWidth: 130,\n  },\n\n  inputFeedback: {\n    color: 'red',\n    textAlign: 'start',\n    fontSize: '13px',\n    fontWeight: 400,\n    marginTop: '3px',\n  },\n}));\n\nfunction App() {\n  // const { isLoaded, loadError } = useLoadScript({\n  //   googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY ? ,\n  //   libraries,\n  // });\n  const classes = useStyles();\n  const [isBusTrackingModalOpen, setIsBusTrackingModalOpen] = useState<boolean>(\n    false\n  );\n\n  let eventSource: EventSource | undefined = undefined;\n  const [listening, setListening] = useState(false);\n  const [feedbackData, setFeedbackData] = useState<IFeedback>();\n\n  const [busIds, setBusIds] = useState<any[]>([]);\n  const [currentBusId, setCurrentBusId] = useState<any>();\n  useEffect(() => {\n    fetch('http://localhost:8084/bus/ids')\n      .then((res) => res.json())\n      .then((result) => {\n        console.log(result);\n        setBusIds(result);\n      });\n  }, []);\n  // const [currentPosition, setCurrentPosition] = useState<any>({});\n\n  // useEffect(() => {\n  //   navigator.geolocation.getCurrentPosition(success);\n  // }, []);\n\n  // const success = (position: any) => {\n  //   const currentPosition = {\n  //     lat: position.coords.latitude,\n  //     lng: position.coords.longitude,\n  //   };\n  //   setCurrentPosition(currentPosition);\n  // };\n\n  // console.log(currentPosition);\n\n  //-8.610423,41.14931 lat long\n  const setBusAlarm = async () => {\n    const response = await fetch(\n      `http://localhost:8082/current-location?id=${currentBusId}&latLong=-8.610423,41.14931`\n    );\n    console.log(response);\n  };\n\n  useEffect(() => {\n    if (!listening) {\n      eventSource = new EventSource('http://localhost:8080/alarm');\n\n      eventSource.onopen = (event) => {\n        console.log('connection opened');\n      };\n\n      eventSource.onmessage = (event) => {\n        console.log('result', event.data);\n        setFeedbackData({\n          open: true,\n          severity: 'warning',\n          message: event.data,\n        });\n      };\n\n      eventSource.onerror = (event: any) => {\n        if (eventSource && event.target) {\n          console.log(event.target.readyState);\n          if (event.target.readyState === EventSource.CLOSED) {\n            console.log('eventsource closed (' + event.target.readyState + ')');\n          }\n          eventSource.close();\n        }\n      };\n\n      setListening(true);\n    }\n    return () => {\n      eventSource && eventSource.close();\n      console.log('eventsource closed');\n    };\n  }, []);\n\n  return (\n    <div className='App' style={{ flexDirection: 'column' }}>\n      {/*  {center={currentPosition}} */}\n      {/* <div\n        style={{\n          padding: 50,\n          width: '90%',\n          marginBottom: 40,\n        }}\n      >\n        <HistoricalTable />\n      </div> */}\n      <FormControl style={{ width: 150 }}>\n        <InputLabel>Bus ids</InputLabel>\n        <Select\n          native\n          value={currentBusId || ''}\n          onChange={(event: any) => {\n            setCurrentBusId(event.target.value);\n          }}\n        >\n          <option aria-label='None' value='' />\n          {busIds.map((item: any, index: number) => (\n            <option key={index} value={item}>\n              {item}\n            </option>\n          ))}\n        </Select>\n      </FormControl>\n      <div style={{ position: 'absolute', top: '10%', left: '20' }}>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => setIsBusTrackingModalOpen(true)}\n        >\n          Track bus\n        </Button>\n      </div>\n      <div style={{ position: 'absolute', top: '15%', left: '20' }}>\n        <Button\n          variant='contained'\n          color='primary'\n          onClick={() => setBusAlarm()}\n        >\n          Set alarm for bus\n        </Button>\n      </div>\n      {isBusTrackingModalOpen && (\n        <BusTrackingModal\n          isOpen={isBusTrackingModalOpen}\n          busId={currentBusId}\n          closeModal={() => {\n            setIsBusTrackingModalOpen(false);\n          }}\n        />\n      )}\n      {feedbackData?.open && feedbackData?.message && feedbackData?.severity && (\n        <Feedback\n          open={feedbackData?.open}\n          message={feedbackData?.message}\n          severity={feedbackData?.severity}\n          onClose={() => {\n            setFeedbackData(undefined);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Map/Map.tsx",["46","47","48"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Table/HistoricalTable.tsx",["49","50"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { DataGridExtended } from 'DataGrid/DataGridExtended';\nimport { GridColumns, GridRowsProp } from '@material-ui/data-grid';\n\nexport interface IHistoricalTableProps {}\n\nconst useStyles = makeStyles((theme) => ({\n  rootDiv: {\n    flexDirection: 'column',\n    display: 'flex',\n    height: '400px',\n  },\n  textField: {\n    textAlign: 'left',\n    width: 'auto',\n    margin: 15,\n    height: 40,\n  },\n  tableStyle: {\n    display: 'flex',\n    height: '500px',\n\n    width: '100%',\n  },\n}));\n\nconst HistoricalTable: React.FC<IHistoricalTableProps> = ({}) => {\n  const classes = useStyles();\n  const [rows, setRows] = useState<GridRowsProp>([]);\n\n  const columns: GridColumns = [\n    {\n      field: 'id',\n      headerName: 'Id',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 1.5,\n    },\n    {\n      field: 'code',\n      headerName: 'Code',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 1.5,\n    },\n    {\n      field: 'name',\n      headerName: 'Name',\n      headerAlign: 'center',\n      align: 'center',\n      flex: 2,\n    },\n  ];\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  const loadData = () => {\n    try {\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <div className={classes.rootDiv}>\n      <DataGridExtended\n        tableHeader={'Historical data'}\n        containerClassName={classes.tableStyle}\n        rows={rows}\n        columns={columns}\n        pageSize={25}\n      />\n    </div>\n  );\n};\n\nexport { HistoricalTable };\n",["51","52"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/DataGrid/DataGridExtended.tsx",[],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Modal/BusTrackingModal.tsx",["53","54"],"/Users/vv/Projects/bitbustracker/ES_2020_2021/client/src/Feedback/Feedback.tsx",[],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":3,"column":10,"nodeType":"61","messageId":"62","endLine":3,"endColumn":13},{"ruleId":"59","severity":1,"message":"63","line":4,"column":10,"nodeType":"61","messageId":"62","endLine":4,"endColumn":25},{"ruleId":"59","severity":1,"message":"64","line":13,"column":3,"nodeType":"61","messageId":"62","endLine":13,"endColumn":14},{"ruleId":"59","severity":1,"message":"65","line":16,"column":7,"nodeType":"61","messageId":"62","endLine":16,"endColumn":12},{"ruleId":"59","severity":1,"message":"66","line":37,"column":9,"nodeType":"61","messageId":"62","endLine":37,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":82,"column":21,"nodeType":"69","endLine":82,"endColumn":67},{"ruleId":"59","severity":1,"message":"70","line":3,"column":8,"nodeType":"61","messageId":"62","endLine":3,"endColumn":25},{"ruleId":"59","severity":1,"message":"71","line":10,"column":3,"nodeType":"61","messageId":"62","endLine":10,"endColumn":12},{"ruleId":"59","severity":1,"message":"72","line":20,"column":9,"nodeType":"61","messageId":"62","endLine":20,"endColumn":16},{"ruleId":"73","severity":1,"message":"74","line":28,"column":59,"nodeType":"75","messageId":"76","endLine":28,"endColumn":61},{"ruleId":"59","severity":1,"message":"77","line":30,"column":16,"nodeType":"61","messageId":"62","endLine":30,"endColumn":23},{"ruleId":"55","replacedBy":"78"},{"ruleId":"57","replacedBy":"79"},{"ruleId":"59","severity":1,"message":"80","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":20},{"ruleId":"67","severity":1,"message":"68","line":87,"column":21,"nodeType":"69","endLine":89,"endColumn":8},"no-native-reassign",["81"],"no-negated-in-lhs",["82"],"@typescript-eslint/no-unused-vars","'Map' is defined but never used.","Identifier","unusedVar","'HistoricalTable' is defined but never used.","'SelectProps' is defined but never used.","'busId' is assigned a value but never used.","'classes' is assigned a value but never used.","react-hooks/exhaustive-deps","Assignments to the 'eventSource' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","NewExpression","'DirectionsBusIcon' is defined but never used.","'lifecycle' is assigned a value but never used.","'InfoBox' is assigned a value but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'setRows' is assigned a value but never used.",["81"],["82"],"'Typography' is defined but never used.","no-global-assign","no-unsafe-negation"]